use std::{
    cell::{Ref, RefCell, RefMut},
    rc::{Rc, Weak},
};

pub type Opt<T> = Option<T>;
pub type Rfr<T> = Reference<T>;
pub type Src<T> = Source<T>;
pub type Tmp<T> = Temp<T>;

#[derive(Debug)]
pub enum Cell<T> {
    Srs(Source<T>),
    Ref(Reference<T>),
}

#[derive(Debug, Clone)]
pub struct Source<T: ?Sized> {
    raw: Rc<RefCell<T>>,
}

impl<T> Source<T> {
    #[allow(non_snake_case)]
    pub fn For(raw: T) -> Self {
        Self {
            raw: Rc::new(RefCell::new(raw)),
        }
    }

    #[allow(non_snake_case)]
    pub fn Copy(rc: &Rc<RefCell<T>>) -> Self {
        Self { raw: rc.clone() }
    }

    pub fn getter(&mut self) -> Ref<T> {
        self.raw.as_ref().borrow()
    }

    pub fn setter(&mut self) -> RefMut<T> {
        self.raw.as_ref().borrow_mut()
    }

    pub fn reffer(&self) -> Rfr<T> {
        Reference::To(self)
    }
}

#[derive(Debug, Clone)]
pub struct Reference<T: ?Sized> {
    raw: Weak<RefCell<T>>,
}

impl<T> Reference<T> {
    #[allow(non_snake_case)]
    pub fn To(source: &Src<T>) -> Self {
        Self {
            raw: Rc::downgrade(&source.raw),
        }
    }

    pub fn get(&self) -> Temp<T> {
        Temp::From(self)
    }

    pub fn copy(&self) -> Reference<T> {
        Self {
            raw: self.raw.clone(),
        }
    }
}

pub struct Temp<T: ?Sized> {
    used: bool,
    raw: Rc<RefCell<T>>,
}

impl<T> Temp<T> {
    #[allow(non_snake_case)]
    pub fn Of(source: &Source<T>) -> Self {
        Self {
            used: false,
            raw: source.raw.clone(),
        }
    }

    #[allow(non_snake_case)]
    pub fn From(reference: &Reference<T>) -> Self {
        Self {
            used: false,
            raw: reference.raw.upgrade().unwrap(),
        }
    }

    pub fn get(&mut self) -> Ref<T> {
        if self.used {
            panic!("Attempted to use a temp reference more than once.");
        }
        self.used = true;
        self.raw.as_ref().borrow()
    }

    pub fn set(&mut self) -> RefMut<T> {
        if self.used {
            panic!("Attempted to use a temp reference more than once.");
        }
        self.used = true;
        self.raw.as_ref().borrow_mut()
    }
}
