//srs as a field should be used for internal parenting for source of truth stuff related to refs

use std::{
    cell::{Ref, RefCell, RefMut},
    rc::{Rc, Weak},
};

use super::node::{Entry, Key};

pub type Opt<T> = Option<T>;
pub type Rfr<T> = Reference<T>;
pub type Srs<T> = Source<T>;

// pub trait Scope<'rt> {
//     fn sup(&self) -> Rfr<dyn Scope>;
//     fn sub(&self, key: Key) -> Opt<Rfr<Entry>>;
// }

#[derive(Debug)]
pub enum Cell<T> {
    Srs(Srs<T>),
    Ref(Rfr<T>),
}

#[derive(Debug, Clone)]
pub struct Source<T: ?Sized> {
    raw: Rc<RefCell<T>>,
}

#[derive(Debug, Clone)]
pub struct Reference<T: Sized> {
    raw: Weak<RefCell<T>>,
    rc: Opt<Rc<RefCell<T>>>,
}

impl<T> Source<T> {
    #[allow(non_snake_case)]
    pub fn Of(raw: T) -> Self {
        Self {
            raw: Rc::new(RefCell::new(raw)),
        }
    }

    #[allow(non_snake_case)]
    pub fn Copy(rc: &Rc<RefCell<T>>) -> Self {
        Self { raw: rc.clone() }
    }
}

impl<T> Reference<T> {
    #[allow(non_snake_case)]
    pub fn To(source: &Srs<T>) -> Self {
        Self {
            raw: Rc::downgrade(&source.raw),
            rc: None,
        }
    }

    #[allow(non_snake_case)]
    pub fn Copy(weak: &Weak<RefCell<T>>) -> Self {
        Self {
            raw: weak.clone(),
            rc: None,
        }
    }

    fn upgrade(&mut self) {
        self.rc = Some(self.get_rc());
    }

    pub fn clean(&mut self) {
        self.rc = None;
    }
}

impl<T> Drop for Reference<T> {
    fn drop(&mut self) {
        self.clean();
    }
}

pub trait Referable<T> {
    fn get(&mut self) -> Ref<T>;
    fn get_mut(&mut self) -> RefMut<T>;
    fn get_rc(&self) -> Rc<RefCell<T>>;
    fn get_ref(&self) -> Rfr<T>;
    fn get_srs(&self) -> Srs<T>;
    fn get_ref_cell(&self) -> Cell<T>;
    fn get_cell(self) -> Cell<T>;
}

impl<T> Referable<T> for Cell<T> {
    fn get(&mut self) -> Ref<T> {
        match self {
            Cell::Srs(s) => s.get(),
            Cell::Ref(r) => r.get(),
        }
    }

    fn get_mut(&mut self) -> RefMut<T> {
        match self {
            Cell::Srs(s) => s.get_mut(),
            Cell::Ref(r) => r.get_mut(),
        }
    }

    fn get_rc(&self) -> Rc<RefCell<T>> {
        match self {
            Cell::Srs(s) => s.get_rc(),
            Cell::Ref(r) => r.get_rc(),
        }
    }

    fn get_srs(&self) -> Source<T> {
        match self {
            Cell::Srs(s) => s.get_srs(),
            Cell::Ref(r) => r.get_srs(),
        }
    }

    fn get_ref(&self) -> Reference<T> {
        match self {
            Cell::Srs(s) => s.get_ref(),
            Cell::Ref(r) => r.get_ref(),
        }
    }

    fn get_ref_cell(&self) -> Cell<T> {
        match self {
            Cell::Srs(s) => s.get_ref_cell(),
            Cell::Ref(r) => r.get_ref_cell(),
        }
    }

    fn get_cell(self) -> Cell<T> {
        self
    }
}

impl<T> Referable<T> for Source<T> {
    fn get(&mut self) -> Ref<T> {
        self.raw.as_ref().borrow()
    }

    fn get_rc(&self) -> Rc<RefCell<T>> {
        self.raw.clone()
    }

    fn get_mut(&mut self) -> RefMut<T> {
        self.raw.as_ref().borrow_mut()
    }

    fn get_ref(&self) -> Rfr<T> {
        Rfr::To(self)
    }

    fn get_srs(&self) -> Srs<T> {
        Srs::Copy(&self.raw)
    }

    fn get_ref_cell(&self) -> Cell<T> {
        Cell::Ref(self.get_ref())
    }

    fn get_cell(self) -> Cell<T> {
        Cell::Srs(self)
    }
}

impl<T> Referable<T> for Reference<T> {
    fn get(&mut self) -> Ref<T> {
        match self.rc {
            Some(ref rc) => rc.as_ref().borrow(),
            None => match &self.rc {
                Some(rc) => rc.as_ref().borrow(),
                None => panic!("Reference is no longer valid"),
            },
        }
    }

    fn get_rc(&self) -> Rc<RefCell<T>> {
        match self.raw.upgrade() {
            Some(rc) => rc,
            None => panic!("Reference is no longer valid"),
        }
    }

    fn get_mut(&mut self) -> RefMut<T> {
        match self.rc {
            Some(ref rc) => rc.as_ref().borrow_mut(),
            None => {
                self.upgrade();
                match &self.rc {
                    Some(rc) => rc.as_ref().borrow_mut(),
                    None => panic!("Reference is no longer valid"),
                }
            }
        }
    }

    fn get_srs(&self) -> Srs<T> {
        Srs::Copy(&self.get_rc())
    }

    fn get_ref(&self) -> Rfr<T> {
        Rfr::Copy(&self.raw)
    }

    fn get_ref_cell(&self) -> Cell<T> {
        Cell::Ref(self.get_ref())
    }

    fn get_cell(self) -> Cell<T> {
        Cell::Ref(self)
    }
}
